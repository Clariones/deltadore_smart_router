<#include "/common/CopyRights.jstl"/>
#include "${h_file_name}"

#define CMD_NAME "${command_name}"
#define MAX_OPTION_LENTH ${max_map_param_length}

${class_name}::${class_name}(){
}

${class_name}::~${class_name}(){
}

const char* ${class_name}::handle(const char* pCmd, DeltaDoreX2Driver* pDriver){
<#if command_config.hasNetwork>
    int network;
</#if>
<#if command_config.hasNode>
    int node;
</#if>

    // first string always the command, so just skip it
    const char* pCurrentParam = pCmd;
    
    <#include "common/handleNetworkParams.jstl"/>
    // process parameter: ${command_config.paramName}
    pCurrentParam = getNextParamStartPosition(pCurrentParam);
    if (pCurrentParam == NULL){
        return newMissingRequiredParametersResponse();
    }
    char* option = new char[strlen(pCurrentParam) + 1];
    cJSON* pResponse = NULL;
    getParamString(pCurrentParam, option);
    if (strlen(option) >= MAX_OPTION_LENTH){
        const char* pResult =  newWrongStringParamResponse("invalid ${command_config.paramName} %s", option);
        delete option;
        return pResult;
<#list command_config.mapping?keys as option>
    } else if (strcmp("${option}", option) == 0 ) {
        pResponse = pDriver->${command_config.mapping[option]}(<@compress single_line=true>
        <#if command_config.hasNetwork>
            network<#if command_config.hasNode>, </#if>
        </#if>
        <#if command_config.hasNode>
            node
        </#if>);
    </@compress>

</#list>
    } else {
        const char* pResult = newWrongStringParamResponse("invalid ${command_config.paramName} %s", option);
        delete option;
        return pResult;
    }
    
    delete option;
    return newResponse(pResponse);
}

const char * ${class_name}::getCommandName(){
    return CMD_NAME;
}

const char * ${class_name}::getUsage(){
    return "${usage}";
}

#undef MAX_OPTION_LENTH
#undef CMD_NAME
<#include "/common/CopyRights.jstl"/>
#include "${h_file_name}"

#define CMD_NAME "${command_name}"

${class_name}::${class_name}(){
}

${class_name}::~${class_name}(){
}

const char* ${class_name}::handle(const char* pCmd, DeltaDoreX2Driver* pDriver){
<#if command_config.hasNetwork>
    int network;
</#if>
<#if command_config.hasNode>
    int node;
</#if>
<#list command_config.params as param>
    <#if param.type == "int">
    int ${param.paramName};
    <#elseif param.type == "string">
    char* ${param.paramName};
    <#else>
    	<#stop "unknow param type " + param.type/>
    </#if>
</#list>
    // first string always the command, so just skip it
    const char* pCurrentParam = pCmd;
    
    <#include "common/handleNetworkParams.jstl"/>
    
<#list command_config.params as param>
    // process parameter: ${param.paramName}
    pCurrentParam = getNextParamStartPosition(pCurrentParam);;
    if (pCurrentParam == NULL){
        return newMissingRequiredParametersResponse();
    }
    <#if param.type == "int">
    getParamInt(pCurrentParam, &${param.paramName});
    if (!isValidIntParam(${param.paramName}, ${param.range[0]}, ${param.range[1]})){
        return newWrongIntParamResponse("invalid ${param.paramName} value %d, should be in [${param.range[0]}, ${param.range[1]}]", ${param.paramName});
    }
    <#elseif param.type == "string">
    ${param.paramName} = new char[strlen(pCurrentParam) +1];
    getParamString(pCurrentParam, ${param.paramName});
    if (!isValidStringParam(${param.paramName}, ${param.length})){
        delete ${param.paramName};
        return newWrongStringParamResponse("invalid ${param.paramName} value, should be string with length [1, ${param.length}]", ${param.paramName});
    }
    <#else>
    	<#stop "unknow param type " + param.type/>
    </#if>
</#list>

    cJSON* pResponse = pDriver->${command_config.apiName}(<@compress single_line=true>
		<#if command_config.hasNetwork>
		    network,
		</#if>
		<#if command_config.hasNode>
		    node<#if command_config.params?has_content>,</#if>
		</#if>
		<#list command_config.params as param>
			${param.paramName}<#if param_has_next>,</#if>
		</#list>
    </@compress>);
    
<#list command_config.params as param>
    <#if param.type == "string">
    delete ${param.paramName};
    </#if>
</#list>    
    return newResponse(pResponse);
}

const char * ${class_name}::getCommandName(){
    return CMD_NAME;
}

const char * ${class_name}::getUsage(){
    return "${usage}";
}

#undef CMD_NAME
<#include "/common/CopyRights.jstl"/>
#include "${h_file_name}"

#define CMD_NAME "${command_name}"

${class_name}::${class_name}(){
}

${class_name}::~${class_name}(){
}

const char* ${class_name}::handle(const char* pCmd, DeltaDoreX2Driver* pDriver){
<#if command_config.hasNetwork>
    int network;
</#if>
<#if command_config.hasNode>
    int node;
</#if>
<#list command_config.params as param>
    <#if param.type == "int">
    int ${param.paramName};
    <#else>
    	<#stop "unknow param type " + param.type/>
    </#if>
</#list>
    // first string always the command, so just skip it
    const char* pCurrentParam = getNextParamStartPosition(pCmd);;
    
    if (pCurrentParam == NULL){
        return newMissingRequiredParametersResponse();
    }
<#if command_config.hasNetwork>
    getParamInt(pCurrentParam, &network);
    if (!isValidNetwork(network)){
        return newWrongIntParamResponse("Invalid network number %d", network);
    }
    
    pCurrentParam = getNextParamStartPosition(pCurrentParam);
    if (pCurrentParam == NULL){
        return newMissingRequiredParametersResponse();
    }
</#if>
<#if command_config.hasNode>
    getParamInt(pCurrentParam, &node);
    if (!isValidNode(node)){
        return newWrongIntParamResponse("Invalid node number %d", node);
    }
    
    pCurrentParam = getNextParamStartPosition(pCurrentParam);
    if (pCurrentParam == NULL){
        return newMissingRequiredParametersResponse();
    }
</#if>
<#list command_config.params as param>
    <#if param.type == "int">
    getParamInt(pCurrentParam, &${param.paramName});
    if (!isValidIntParam(${param.paramName}, ${param.range[0]}, ${param.range[1]}){
        return newWrongIntParamResponse("invalid ${param.paramName} value %d, should be in [${param.range[0]}, ${param.range[1]}]", ${param.paramName});
    }
    <#else>
    	<#stop "unknow param type " + param.type/>
    </#if>
    <#if param_has_next>
    
    pCurrentParam = getNextParamStartPosition(pCurrentParam);
    if (pCurrentParam == NULL){
        return newMissingRequiredParametersResponse();
    }
    </#if>
</#list>


    cJSON* pResponse = pDriver->${command_config.apiName}(<@compress single_line=true>
		<#if command_config.hasNetwork>
		    network,
		</#if>
		<#if command_config.hasNode>
		    node,
		</#if>
		<#list command_config.params as param>
			${param.paramName}<#if param_has_next>, </#if>
		</#list>
    </@compress>);
    return newResponse(pResponse);
}

const char * ${class_name}::getCommandName(){
    return CMD_NAME;
}

const char * ${class_name}::getUsage(){
    return "${usage}";
}

#undefine CMD_NAME